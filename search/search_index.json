{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Shalom Templates Template generation for Web development projects. Installation git clone \"https://github.com/IpsumDominum/ShalomTemplates.git\" install dependencies cd ShalomTemplates pip install jinja2 # Jinja2 is pretty much the only dependency st --version # check if it is properly installed Add to System Path and give permission to run Linux (Ubuntu 18.04 tested) $export PATH=/replace/this/with/path/to/ShalomTemplates:$PATH $chmod 755 st # Gives st executable permission Windows Open system variables and append to the PATH variable, the path to ShalomTemplates. Guide to how to add to system variable on windows Get Started See Quick Start Commands st new [project-name] - Create a new project.(TODO) st build - Build the project. st add model|service - Adds a component to the project.(TODO) st -h - Print help message and exit. Project layout project.shalom # The configuration file. models/ exampleModel.auleModel # Some model ... # Some more Models... build/","title":"Home"},{"location":"#shalom-templates","text":"Template generation for Web development projects.","title":"Shalom Templates"},{"location":"#installation","text":"git clone \"https://github.com/IpsumDominum/ShalomTemplates.git\"","title":"Installation"},{"location":"#install-dependencies","text":"cd ShalomTemplates pip install jinja2 # Jinja2 is pretty much the only dependency st --version # check if it is properly installed","title":"install dependencies"},{"location":"#add-to-system-path-and-give-permission-to-run","text":"","title":"Add to System Path and give permission to run"},{"location":"#linux-ubuntu-1804-tested","text":"$export PATH=/replace/this/with/path/to/ShalomTemplates:$PATH $chmod 755 st # Gives st executable permission","title":"Linux (Ubuntu 18.04 tested)"},{"location":"#windows","text":"Open system variables and append to the PATH variable, the path to ShalomTemplates. Guide to how to add to system variable on windows","title":"Windows"},{"location":"#get-started","text":"See Quick Start","title":"Get Started"},{"location":"#commands","text":"st new [project-name] - Create a new project.(TODO) st build - Build the project. st add model|service - Adds a component to the project.(TODO) st -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"project.shalom # The configuration file. models/ exampleModel.auleModel # Some model ... # Some more Models... build/","title":"Project layout"},{"location":"about/","text":"Shalom Templates 2020 Aule Limited","title":"About"},{"location":"pipeline/","text":"Pipeline Shalom template works around an Object called Pipeline() . Pipeline() essentially Loads everything that needs to be loaded, in order, and pass the data from one loaded thing to the next, and then finally all to the builder, which checks dependencies etc and builds the final output. buildpipline.py class Pipeline() def __init__(self): #-------------------Loads project---------------------- self.projectLoader = projectLoader() self.project = projectLoader.load_project() #Currently config is not in use self.projectName = self.project[\"name\"] #-------------------Load Data and Components----------- self.data_loader = DataLoader() self.component_loader = ComponentLoader() #-------------------Build Project---------------------- self.builder = TemplateBuilder(self.projectName) buildpipe = self.get_build_pipe(self.project[\"parsed\"]) self.builder.build(buildpipe) def get_build_pipe(self): #-------------------Get Data--------------------------- data = self.data_loader.load(parsed[\"models\"]) #-------------------Get Components--------------------- componentTemplates = self.component_loader.load(parsed[\"components\"]) #-------------------Check dependencies----------------- self.check_dependencies(parsed) #-------------------Build buildpipe-------------------- buildpipe = self.construct_build_pipe(parsed,data,componentTemplates) StructureLoader DataLoader","title":"Pipeline(How it works)"},{"location":"pipeline/#pipeline","text":"Shalom template works around an Object called Pipeline() . Pipeline() essentially Loads everything that needs to be loaded, in order, and pass the data from one loaded thing to the next, and then finally all to the builder, which checks dependencies etc and builds the final output. buildpipline.py class Pipeline() def __init__(self): #-------------------Loads project---------------------- self.projectLoader = projectLoader() self.project = projectLoader.load_project() #Currently config is not in use self.projectName = self.project[\"name\"] #-------------------Load Data and Components----------- self.data_loader = DataLoader() self.component_loader = ComponentLoader() #-------------------Build Project---------------------- self.builder = TemplateBuilder(self.projectName) buildpipe = self.get_build_pipe(self.project[\"parsed\"]) self.builder.build(buildpipe) def get_build_pipe(self): #-------------------Get Data--------------------------- data = self.data_loader.load(parsed[\"models\"]) #-------------------Get Components--------------------- componentTemplates = self.component_loader.load(parsed[\"components\"]) #-------------------Check dependencies----------------- self.check_dependencies(parsed) #-------------------Build buildpipe-------------------- buildpipe = self.construct_build_pipe(parsed,data,componentTemplates)","title":"Pipeline"},{"location":"pipeline/#structureloader","text":"","title":"StructureLoader"},{"location":"pipeline/#dataloader","text":"","title":"DataLoader"},{"location":"quickstart/","text":"Quick start For now, after installation. run st new to create a new project then, run st build to see an example project built","title":"Quick Start"},{"location":"quickstart/#quick-start","text":"For now, after installation. run st new to create a new project then, run st build to see an example project built","title":"Quick start"},{"location":"templates/","text":"Making Custom Templates Section in construction","title":"Custom Templates"},{"location":"templates/#making-custom-templates","text":"Section in construction","title":"Making Custom Templates"},{"location":"todo/","text":"Roadmap: Main Features Parsing structure File Generating Data/Component to be added in the project Re-design of project generation pipline? Sub Features Dynamic routing Dynamic imports Other framework support other than Angular Making it easier to write Templates Bug fixes","title":"TODO"},{"location":"todo/#roadmap","text":"","title":"Roadmap:"},{"location":"todo/#main-features","text":"Parsing structure File Generating Data/Component to be added in the project Re-design of project generation pipline?","title":"Main Features"},{"location":"todo/#sub-features","text":"Dynamic routing Dynamic imports Other framework support other than Angular Making it easier to write Templates Bug fixes","title":"Sub Features"}]}